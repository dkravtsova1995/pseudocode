1. What is time complexity and what is its relation to algorithms?

    Time Complexity is expressed as a function that estimates the time it takes to execute a program. Which means time complexity estimates time of an algorithm as well.



2. What is runtime?

    Runtime is a physical time duration of an algorithm; it is also synonymous with time complexity.




3. How is the runtime of an algorithm calculated?

    To determine the runtime of an algorithm or time complexity, we calculate how quickly the time to run the program grows relative to the amount of input we feed into the program.




4. Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.

     1. Constant Growth : O(1)
     2. Logarithmic Growth: O(log n)
     3. Linear Growth: O(n)
     4. Log-Linear Growth:O(n log n)
     5. Quadratic Growth : O(n^2)
     6. Exponential Growth : O(2^n)
     7. Factorial: O(n!)



5. Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

     Linear Growth Rate:
        
       Imagine leaving parking lot after some big event. The more cars are in front of you the later you will get on the high way.



6. Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION


    Linear Growth: O(n)




7. Determine the time complexity of the following snippet of code.

If you get stuck, read through the graphical representation section again.

FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION

    Quadratic Growth : O(n^2)




8. Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

    Exponential Growth : O(2^n)

9. Out of the code snippets you just saw, which is the most time efficient?

    First snippet of code (Linear Growth: O(n)) is the most efficient.