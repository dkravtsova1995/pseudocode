1. In your own words, explain what clean code is and why it is important.

Clean code is the philosophy behind writing maintainable and readable code. Having clean, high-quality code is especially important when working with others and with large-scale, complex applications in general so your co-workers can read your code and be able to fix bugs quickly.

2. Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

Banking system relies on computers completely that is why the use of bad code could not be accaptable. Billions of dollars could be lost and personal information would not be secure.

3. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION toCelsius(fahrenheit)                           
 SET temperature to (fahrenheit-32) * (5/9)       
 PRINT temperature 
END FUNCTION

FUNCTION toFahrenheit(celsius)                      
 SET temperature to celsius * 1.8000 + 32.00   
 PRINT temperature                      
END FUNCTION

I refactored this code using extraction method and created two fucntions instead on one. This makes this code not only reusable but also easier to read. I also renamed function names and parameters making them meaningfull and easier to understand.

4. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

I consider this code clean because it uses meaningful and easy to understand names and appropriate nesting. 





5. Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   ASSIGN total = subTotal * discountRate + (subTotal * tax)
   PRINT "Your total due is: " + total

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - total
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + total
   END IF
END FUNCTION




b. The following function checks out a book if there are no issues with the guest's account.

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
   CALL checkGuestInfo
     SET book.status to "Checked Out"
     PRINT "Your books have been issued."
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

FUNCTION checkGuestInfo(book, guest)
  IF NOT(guest.hasOverdueBooks) AND IF guest.outstandingFees = 0 THEN
    APPEND book to guest.books 
  END IF
END FUNCTION



c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.

CLASS Balance

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

END

CLASS Deposit

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

END

CLASS Withdrawal

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

END

CLASS CardOffer

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

END

CLASS CheckStatus

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

END



Programming Questions
You may do the following problems in any language of your choice. Use the clean code principles taught in this section while writing the code.

6. Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.

var integers=[5, 10, 10];

function isSquare() {
 var sum = integers.reduce((total, num) =>
  total + num);

  if(sum > 0 && Math.sqrt(sum) % 1 === 0) {
    return (Math.sqrt(sum));
  } else {
    return sum;
  }
};

isSquare()


7. Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.


function findDuplicate(array) {
    var counts = [];
    for(var i = 0; i <= array.length; i++) {
        if(counts[array[i]] === undefined) {
            counts[array[i]] = 1;
        } else {
            return true;
        }
    }
    return false;
}

var integers = [1, 3, 5, 4, 1, 2]
findDuplicate(integers);